#!/usr/bin/python

# Copyright 2017 Ent. Services Development Corporation LP
#
# Redistribution and use of this software in source and binary forms,
# with or without modification, are permitted provided that the
# following conditions are met:
#
# Redistributions of source code must retain the above copyright
# notice, this list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright
# notice, this list of conditions and the following disclaimer in the
# documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
# COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

"""
Eucalyptus management console startup script
"""

from __future__ import print_function

import argparse
import os.path
import sys


CONFIG_FILE = '/etc/eucaconsole/console.ini'


def errx(exitcode, msg):
    """
    Display a formatted error message on stderr, then exit with the
    given exit code.
    """

    print('{}:'.format(os.path.basename(sys.argv[0])),
          msg, file=sys.stderr)
    sys.exit(exitcode)


def main():
    """
    Translate command line args into what pserve wants, then execute
    pserve.
    """

    # Daemon-related options are deprecated in Pyramid upstream, so if
    # we implement it we should do it ourselves.  Let's wait until
    # someone asks for it and do a double-forking thing then.
    parser = argparse.ArgumentParser(
        description='Eucalyptus management console')
    parser.add_argument('-c', metavar='FILE', dest='conf', default=CONFIG_FILE,
                        help=('specify the configuration file  (default: {})'
                              .format(CONFIG_FILE)))
    dev_args = parser.add_argument_group('developer arguments')
    dev_args.add_argument('-r', action='store_true', dest='reload',
                          help='enable auto-restart file monitoring')
    args = parser.parse_args()

    if not os.path.isfile(args.conf):
        errx(os.EX_NOINPUT,
             'configuration file "{}" does not exist'.format(args.conf))
    if not os.access(args.conf, os.R_OK):
        errx(os.EX_NOPERM,
             'cannot read configuration file "{}"'.format(args.conf))

    pserve_argv = ['pserve', args.conf, 'worker_class=eventlet']
    if args.reload:
        pserve_argv.append('--reload')
    try:
        os.execvp(pserve_argv[0], pserve_argv)
    except OSError as exc:
        errx(os.EX_OSERR, 'failed to run pserve: {}'.format(exc.strerror))


if __name__ == '__main__':
    main()
